{"version":3,"sources":["assets/bolsothink.jpeg","assets/bolsomad.jpg","assets/bolsohappy.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","CURRENT_DATE","Date","textColor","color","mood","Sim","happy","Não","mad","think","App","useState","answer","setAnswer","lastDate","setLastDate","loading","setLoading","showAlert","setShowAlert","handleAlert","onSubmit","event","preventDefault","split","year","month","day","brDate","setTimeout","Math","pow","Field","Label","style","size","Control","htmlFor","Input","value","id","onChange","target","type","className","alt","src","rounded","show","onClose","Content","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,yC,iBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,0NCmBrCC,G,MAAe,IAAIC,MAEnBC,EAAY,CAChBC,MAAO,WAGHC,EAAO,CACXC,IAAKC,IACLC,SAAKC,IACLC,MAAOA,KA2FMC,MAxFf,WAAgB,IAAD,EACeC,mBAAS,OADxB,mBACNC,EADM,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIqBN,oBAAS,GAJ9B,mBAINO,EAJM,KAIKC,EAJL,KAMPC,EAAc,kBAAMD,GAAcD,IAgCxC,OACE,kBAAC,WAAD,KAEA,kBAAC,YAAD,KACE,kBAAC,UAAD,KACE,0BAAMG,SAnCS,SAACC,GACpBA,EAAMC,iBADwB,MAGHT,EAASU,MAAM,KAHZ,mBAGvBC,EAHuB,KAGjBC,EAHiB,KAGVC,EAHU,KAIxBC,EAAS,IAAI3B,KAAKwB,EAAMC,EAAQ,EAAGC,GAErCC,EAAS5B,EACXoB,KAIFH,GAAW,GACXJ,EAAU,SAEVgB,WAAW,WAET,IAGMjB,EAHWZ,EAAe4B,GAGL,GAAKE,KAAKC,IAAI,GAAI,GAAK,MAAQ,SAC1DlB,EAAUD,GACVK,GAAW,IACV,QAcG,kBAAC,OAAKe,MAAN,KACE,kBAAC,OAAKC,MAAN,CAAYC,MAAOhC,EAAWiC,KAAK,SAAnC,kDAGA,kBAAC,OAAKC,QAAN,CAAcD,KAAK,QAAQE,QAAQ,YACjC,kBAAC,OAAKC,MAAN,CACEH,KAAK,QACLI,MAAOzB,EACP0B,GAAG,WACHC,SAnBO,SAAC,GAA2B,IAAfF,EAAc,EAAxBG,OAAUH,MAChCxB,EAAYwB,IAmBAI,KAAK,WAIX,yBAAKC,UAAU,SACb,kBAAC,QAAD,CACEC,IAAI,aACJC,IAAgB,QAAXlC,EAAmBH,IAAQL,EAAKQ,MAGzC,kBAAC,UAAD,CAASuB,KAAM,EAAGD,MAAOhC,GAAYc,EAAU,MAAQJ,GACvD,kBAAC,SAAD,CACEI,QAASA,EACT+B,SAAO,EACPZ,KAAK,QACLhC,MAAM,SACNwC,KAAK,UALP,sCAYN,kBAAC,QAAD,CAAOK,KAAM9B,EAAW+B,QAAS7B,GAC/B,kBAAC,QAAM8B,QAAP,KACE,kBAAC,UAAD,CAAShB,MAAO,CAAEiB,gBAAiB,YACjC,kFCnGUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6ce0cad1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bolsothink.4704e793.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/bolsomad.fe60fbe9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bolsohappy.3585ef45.jpg\";","import React, { useState, Fragment } from 'react';\n\nimport {\n  Button,\n  Container,\n  Image,\n  Content,\n  Form,\n  Heading,\n  Modal,\n  Section\n} from 'react-bulma-components/full';\n\nimport mad from './assets/bolsomad.jpg';\nimport happy from './assets/bolsohappy.jpg';\nimport think from './assets/bolsothink.jpeg';\n\nimport './App.css';\n\nconst CURRENT_DATE = new Date();\n\nconst textColor = {\n  color: '#f8ffff',\n}\n\nconst mood = {\n  Sim: happy,\n  Não: mad,\n  think: think\n};\n\nfunction App() {\n  const [answer, setAnswer] = useState('...');\n  const [lastDate, setLastDate] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleAlert = () => setShowAlert(!showAlert);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const [year, month, day] = lastDate.split('-');\n    const brDate = new Date(year, month - 1, day);\n\n    if (brDate > CURRENT_DATE) {\n      handleAlert();\n      return;\n    }\n\n    setLoading(true);\n    setAnswer('think');\n\n    setTimeout(() => {\n  \n      const deadLine = CURRENT_DATE - brDate;\n\n  \n      const answer = deadLine >= 24 * Math.pow(10, 7) ? 'Sim' : 'Não';\n      setAnswer(answer);\n      setLoading(false);\n    }, 800);\n\n  };\n\n  const handleChange = ({ target: { value } }) => {\n    setLastDate(value);\n  };\n\n  return (\n    <Fragment>\n\n    <Container>\n      <Content>\n        <form onSubmit={handleSubmit}>\n          <Form.Field>\n            <Form.Label style={textColor} size=\"large\">\n              Qual foi a ultima vez que você fez cocô?\n            </Form.Label>\n            <Form.Control size=\"large\" htmlFor=\"lastDate\">\n              <Form.Input\n                size=\"large\"\n                value={lastDate}\n                id=\"lastDate\"\n                onChange={handleChange}\n                type=\"date\"\n              />\n            </Form.Control>\n          </Form.Field>\n          <div className=\"image\">\n            <Image\n              alt=\"bolso icon\"\n              src={answer === '...' ? think : mood[answer]}\n              />\n          </div>\n          <Heading size={1} style={textColor}>{loading ? '...' : answer}</Heading>\n          <Button\n            loading={loading}\n            rounded\n            size=\"large\"\n            color=\"danger\"\n            type=\"submit\"\n          >\n            Hoje é dia de fazer cocô?\n          </Button>\n        </form>\n      </Content>\n    </Container>\n    <Modal show={showAlert} onClose={handleAlert}>\n      <Modal.Content>\n        <Section style={{ backgroundColor: '#f8ffff' }}>\n          <p> Você não pode fazer cocô no futuro! </p>\n        </Section>\n      </Modal.Content>\n    </Modal>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}